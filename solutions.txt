Where Things Are
___________________________________

0. Where in the Rails app directory structure is the code corresponding to the HangpersonGame model?
	
1. Where is the code that most closely corresponds to the controller logic in the Sinatra apps' app.rb file?

2. Where is the code corresponding to the Sinatra app's views (new.erb, show.erb, etc.)? Why do you think the filename suffixes for these views are different in Rails than they are in Sinatra?

3. How do routes (e.g. GET /new) get mapped to route handlers (controller actions) in Sinatra vs. in Rails? (Hint: look at config/routes.rb.) Why do you think Rails adds this extra level of indirection on routes?

4. What is the role of the :as => 'name' option in the route declarations of config/routes.rb? (Hint: look at the views.)

Session
___________________________________

0. Syntactically, what are the differences between how this session management is done in Rails vs. Sinatra?

1. In the Sinatra version, we stored the @game object directly into session[]. In the Rails version, we serialize the object into YAML before storing it in the session[]. Why do we do this? (Hint: use the keywords in this question to do a Web search.)

2. A popular serialization format for exchanging data between Web apps is JSON. Why wouldn't it work to use JSON instead of YAML? (Hint: try replacing YAML.load() with JSON.parse() and .to_yaml with .to_json to do this test. You will have to clear out your cookies associated with localhost:3000 in order to nuke the session[]. Based on the error messages you get when trying to use JSON serialization, you should be able to explain why YAML serialization works in this case but JSON doesn't.)

Views
___________________________________

0. In the Sinatra version, each controller action ends with either redirect (which as you can see becomes redirect_to in Rails) to redirect the player to another action, or erb to render a view. Why are there no explicit calls corresponding to erb in the Rails version? Based on the code in the app, can you discern the Convention-over-Configuration rule that is at work here?

1. How are forms handled differently between Sinatra and Rails views? (Hint: it would be perfectly legal to use raw HTML <form> tags in Rails; why do you think that's not the preferred way to do it?)

2. How are form elements such as text fields and buttons handled in Rails? (Again, raw HTML would be legal, but what's the motivation behind the way Rails does it?)

3. In the Sinatra version, the show, win and lose views re-use the code in the new view that offers a button for starting a new game. How is this done in the Rails version?

Cucumber scenarios
___________________________________

0. What is a qualitative explanation for why the Cucumber scenarios and step definitions didn't need to be modified at all to work equally well with the Sinatra or Rails versions of the app?
